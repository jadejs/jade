// Generated by IcedCoffeeScript 1.6.3-i
(function() {
  var clients, fs, port, server, watchers, _id;

  fs = require('fs');

  server = null;

  port = 3001;

  module.exports = function(files) {
    return '<script>(' + (function(files, port) {
      var a, file, i, res;
      a = (function() {
        var _results;
        _results = [];
        for (file in files) {
          i = files[file];
          _results.push(file);
        }
        return _results;
      })();
      res = {
        changed: false
      };
      window.watch = function(res) {
        var script, src;
        if (!res.changed) {
          script = document.createElement('script');
          src = "http://" + location.hostname + ":" + port + "/?files=" + (a.join(',')) + "&" + (Date.now()) + "&callback=watch";
          if (res._id) {
            src += "&_id=" + res._id;
          }
          script.src = src;
          script.addEventListener('error', function() {
            return setTimeout(ping, 2000);
          }, true);
          document.getElementsByTagName('head')[0].appendChild(script);
        } else {
          location.reload();
        }
        return res;
      };
      window.ping = function() {
        var script;
        script = document.createElement('script');
        script.src = "http://" + location.hostname + ":" + port + "/ping?callback=reload";
        script.addEventListener('error', function() {
          return setTimeout(ping, 2000);
        }, true);
        return document.getElementsByTagName('head')[0].appendChild(script);
      };
      window.reload = location.reload.bind(location);
      return setTimeout(function() {
        return watch(res);
      }, 1000);
    }) + ').call(this,' + JSON.stringify(files) + ',' + port + ');</script>';
  };

  if (process.env === 'production') {
    return;
  }

  server = require('express')();

  _id = 0;

  watchers = {};

  clients = {};

  server.listen(port);

  server.get('/', function(req, res) {
    var file, files, _i, _len;
    files = req.query.files.split(',');
    res._id = +(req.query._id || ++_id);
    clients[res._id] = {
      res: res,
      files: files
    };
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (!watchers[file]) {
        if (watchers[file] == null) {
          watchers[file] = {};
        }
        fs.watchFile(file, function() {
          var a, id, _j, _len1, _ref, _ref1, _results;
          _ref = watchers[file];
          _results = [];
          for (id in _ref) {
            a = _ref[id];
            res = clients[id].res;
            if (res._id) {
              res.jsonp({
                changed: file
              });
            }
            _ref1 = clients[id].files;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              file = _ref1[_j];
              delete watchers[file][res._id];
            }
            delete clients[id];
            _results.push(res._id = 0);
          }
          return _results;
        });
      }
      watchers[file][res._id] = res._id;
    }
    return setTimeout(function() {
      if (res._id) {
        return res.jsonp({
          changed: false,
          _id: _id
        });
      }
    }, 5000);
  });

  server.get('/ping', function(req, res) {
    console.log('ping');
    return res.jsonp({});
  });

}).call(this);
