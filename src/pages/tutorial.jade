extends ./layout.jade

block content
  #body
    h2 Tutorial

    h3 Introduction
    p.note.
      This tutorial is a work in progress. Once it's finished it will become a fully fledged getting started guide.
    p.
      Welcome to the Jade templating engine.  Jade is designed primarily for server side templating in node.js, however it can be used in many other environments.  It is only intended to produce XML like documents (HTML, RSS etc.) so don't use it to create plain text/markdown/CSS/whatever documents.
    p.
      This tutorial will take you through:
    ul
      li
        a(href="#Basics") The Basics
        ul
          li Creating simple tags
          li Putting text inside your tags
          li Attributes
          li IDs and Classes
      li
        a(href="#Javascript") JavaScript
        ul
          li Outputing Text
          li Setting Attributes
          li Loops and Conditionals
      li
        a(href="#Advanced") Advanced Templating
        ul
          li Extends & Blocks
          li Includes
          li Mixins
          li Filters

    h3#Basics The Basics
    p Jade can be used just as a short hand for HTML.  This section covers everything you need to know to do that.
    h4 Creating Simple Tags
    p.
      Jade is whitespace sensitive, so there's no need to close your tags, jade does that for you.  You can also nest tags within other tags just by indenting them.
    .row(data-control='interactive')
      .col
        pre(data-control='input-jade')
          code
            :jadesrc
              div
                address
                i
                strong
      .col
        pre(data-control='output-html')
          code
            :htmlsrc
              <div>
                <address></address>
                <i></i>
                <strong></strong>
              </div>
    h4 Putting Text Inside your Tags
    p.
      By default, the content of a tag is parsed as more jade.  There are three ways to put plain text inside a tag.
    .row(data-control='interactive')
      .col
        pre(data-control='input-jade')
          code
            :jadesrc
              h1 Welcome to Jade
              p
                | Text can be included in a number of
                | different ways.
              p.
                This way is shortest if you need big
                blocks of text spanning multiple
                lines.
      .col
        pre
          code.output
            :htmlsrc
              <h1>Welcome to Jade</h1>
              <p>Text can be included in a number of
                 different ways.</p>
              <p>This way is shortest if you need big
                 blocks of text spanning multiple
                 lines.</p>
    h4 Adding Attributes to your Tags
    p.
      To add attributes you put them in brackets after the tag name, note that they must be seperated by a comma.
    .row(data-control='interactive')
      .col
        pre(data-control='input-jade')
          code
            :jadesrc
              h1(id="title") Welcome to Jade
              button(class="btn", data-action="bea").
                Be Awesome
      .col
        pre(data-control='output-html')
          code
            :htmlsrc
              <h1 id="title">Welcome to Jade</h1>
              <button class="btn" data-action="bea">
                Be Awesome
              </button>
    h4 IDs and Classes
    p.
      Adding IDs and Classes is super common, so we made it super easy to do by adding a simple short hand.  The syntax is just like that of CSS selectors:
    .row(data-control='interactive')
      .col
        pre(data-control='input-jade')
          code
            :jadesrc
              h1#title Welcome to Jade
              button.btn(data-action="bea") Awesome
      .col
        pre(data-control='output-html')
          code
            :htmlsrc
              <h1 id="title">Welcome to Jade</h1>
              <button class="btn" data-action="bea">
                Awesome
              </button>

    h3#Javascript JavaScript
    p Jade is much more than just a short hand for HTML.  It also has features that let you build dynamic templates.

    h4 Outputing Text
    p You can output raw text from JavaScript variables.  Jade will also helpfully filter the text for you so it's safe from nasty html injection attacks.

    div
      pre
        code
          :jssrc
            var jade = require('jade');
            var fn = jade.compile(jadeTemplate);
            var htmlOutput = fn({
              maintainer: {
                name: 'Forbes Lindesay',
                twitter: '@ForbesLindesay',
                blog: 'forbeslindesay.co.uk'
              }
            })
      .row
        .col
          pre
            code
              :jadesrc
                h1
                  | Maintainer:
                  = ' ' + maintainer.name
                table
                  tr
                    td Twitter
                    td= maintainer.twitter
                  tr
                    td Blog
                    td= maintainer.blog
        .col
          pre
            code
              :htmlsrc
                <h1>Maintainer: Forbes Lindesay</h1>
                <table>
                  <tr>
                    <td>Twitter</td>
                    <td>@ForbesLindesay</td>
                  </tr>
                  <tr>
                    <td>Blog</td>
                    <td>forbeslindesay.co.uk</td>
                  </tr>
                </table>

    p.note If you <em>don't</em> want jade to filter your output, use <code>!=</code> instead of <code>=</code>.

    h4 Setting Attributes
    p Setting attributes to JavaScript values requires no extra work:

    .row
      .col
        pre
          code
            :jadesrc
              h1(name=maintainer.name)
                | Maintainer:
                = ' ' + maintainer.name
              table
                tr
                  td(style='width: '+(100/2)+'%').
                    Twitter
                  td= maintainer.twitter
                tr
                  td(style='width: '+(100/2)+'%').
                    Blog
                  td= maintainer.blog
      .col
        pre
          code
            :htmlsrc
              <h1 name="Forbes Lindesay">
                Maintainer: Forbes Lindesay
              </h1>
              <table>
                <tr>
                  <td style="width: 50%">Twitter</td>
                  <td>@ForbesLindesay</td>
                </tr>
                <tr>
                  <td style="width: 50%">Blog</td>
                  <td>forbeslindesay.co.uk</td>
                </tr>
              </table>

    h4 Loops and Conditionals
    p You can use if statements to decide what to display depending on various factors - maybe a user is logged in or not, or some content exists or not, or a combination of factors.

    p Jade's if statements are almost exactly like those present in javascript, except the parantheses are optional, and you don't need braces!

    .row
      .col
        pre
          code
            :jadesrc
              - var user = { name: 'John' }
              if user
                div.welcomebox
                  // Filtered inline output
                  p.
                    Welcome, \#{user.name}
              else
                div.loginbox
                  form(name="login", action="/login", method="post")
                    input(type="text", name="user")
                    input(type="password", name="pass")
                    input(type="submit", value="login")
      .col
        .row
          pre
            code
              :htmlsrc
                <div class="loginbox">
                  <form name="login" action="/login" method="post">
                    <input type="text" name="user">
                    <input type="password" name="pass">
                    <input type="submit" value="login">
                  </form>
                </div>
        p(style="text-align: center") or
        .row
          pre
            code
              :htmlsrc
                <div class="welcomebox">
                  <!-- Filtered inline output-->
                  <p>Welcome, John</p>
                </div>

    h3#Advanced Advanced Templating

    h4 Extends & Blocks
    h4 Includes
    h4 Mixins
    h4 Filters

    p To Be Continued....

    p
      | The jade source for this file can be viewed (and edited/improved) on 
      a(href='https://github.com/visionmedia/jade/blob/gh-pages/src/pages/tutorial.jade') GitHub
